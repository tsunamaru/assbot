#!/usr/bin/env python3

from telethon import TelegramClient, events, sync
from telethon.tl.types import Channel, InputChannel, PeerChannel
import logging, os
from decouple import config
import time

# if .env present, load it, otherwise load from environment
if os.path.exists('.env'):
    LOGLEVEL = config('LOGLEVEL', default='INFO')
    API_ID = config('API_ID')
    API_HASH = config('API_HASH')
    CHANNEL = config('CHANNEL')
    ADMIN = config('ADMIN')
    BOT_NAME = config('BOT_NAME')
else:
    LOGLEVEL = os.environ.get('LOGLEVEL', 'INFO')
    API_ID = os.environ.get('API_ID')
    API_HASH = os.environ.get('API_HASH')
    CHANNEL = os.environ.get('CHANNEL')
    ADMIN = os.environ.get('ADMIN')
    BOT_NAME = os.environ.get('BOT_NAME')

EXCLUDED_USERS = [BOT_NAME, ADMIN]

logging.basicConfig(format='%(asctime)s - %(levelname)s: %(message)s',
                    encoding='utf-8', level=logging.getLevelName(LOGLEVEL))

client = TelegramClient("Telethon", API_ID, API_HASH)
client.start()

channel = client.get_entity(CHANNEL)

def cfg_generate():
    subscribers_id = []
    for user in client.iter_participants(channel):
        if user.last_name is None:
            subscribers_id.append(str(str(user.id) + '/n' + str(user.first_name)))
        else:
            subscribers_id.append(str(str(user.id) + '/n' + str(user.first_name) + ' ' + str(user.last_name)))

    for user in EXCLUDED_USERS:
        user_id = str(client.get_entity(user).id)
        for subscriber in subscribers_id:
            if user_id in subscriber:
                subscribers_id.remove(subscriber)

    f = open('cfg.py', 'w')
    f.write('# This file autogenerated by on ' + time.strftime("%d/%m/%Y %H:%M:%S"))
    f.write('\n')
    f.write('# Do not edit, your changes will be overwritten.')
    f.write('\n\n')
    f.write('SUBSCRIBERS_ID = [')
    f.write('\n')

    for x in subscribers_id:
        userdata = x.split('/n')
        f.write("\t'" + userdata[0] + "', # " + userdata[1] + "\n")

    f.write(']\n')
    f.close()

    logging.info('cfg.py updated!')

if __name__ == "__main__":
    cfg_generate()